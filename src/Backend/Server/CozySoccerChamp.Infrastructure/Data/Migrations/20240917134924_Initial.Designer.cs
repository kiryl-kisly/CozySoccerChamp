// <auto-generated />
using System;
using CozySoccerChamp.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CozySoccerChamp.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240917134924_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.7");

            modelBuilder.Entity("CozySoccerChamp.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("ChatId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TelegramFirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("TelegramLastName")
                        .HasColumnType("TEXT");

                    b.Property<string>("TelegramUserName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ChatId")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CozySoccerChamp.Domain.Entities.Soccer.Competition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EmblemUrl")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Finished")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Started")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Competitions");
                });

            modelBuilder.Entity("CozySoccerChamp.Domain.Entities.Soccer.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CompetitionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ExternalMatchId")
                        .HasColumnType("INTEGER");

                    b.Property<char?>("Group")
                        .HasMaxLength(1)
                        .HasColumnType("TEXT");

                    b.Property<int?>("MatchDay")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("MatchTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Stage")
                        .HasColumnType("TEXT");

                    b.Property<int?>("TeamAwayId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TeamHomeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CompetitionId");

                    b.HasIndex("TeamAwayId");

                    b.HasIndex("TeamHomeId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("CozySoccerChamp.Domain.Entities.Soccer.MatchResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ExtraTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("FullTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("HalfTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("MatchId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Penalties")
                        .HasColumnType("TEXT");

                    b.Property<string>("RegularTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MatchId")
                        .IsUnique();

                    b.ToTable("MatchResults");
                });

            modelBuilder.Entity("CozySoccerChamp.Domain.Entities.Soccer.Prediction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double?>("Coefficient")
                        .HasColumnType("REAL");

                    b.Property<int>("MatchId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PointPerMatch")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PredictedAwayScore")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PredictedHomeScore")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("PredictionTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.HasIndex("UserId", "MatchId")
                        .IsUnique();

                    b.ToTable("Predictions");
                });

            modelBuilder.Entity("CozySoccerChamp.Domain.Entities.Soccer.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CodeName")
                        .HasColumnType("TEXT");

                    b.Property<string>("EmblemUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ShortName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("CozySoccerChamp.Domain.Entities.Soccer.Match", b =>
                {
                    b.HasOne("CozySoccerChamp.Domain.Entities.Soccer.Competition", "Competition")
                        .WithMany("Matches")
                        .HasForeignKey("CompetitionId");

                    b.HasOne("CozySoccerChamp.Domain.Entities.Soccer.Team", "TeamAway")
                        .WithMany("AwayMatches")
                        .HasForeignKey("TeamAwayId");

                    b.HasOne("CozySoccerChamp.Domain.Entities.Soccer.Team", "TeamHome")
                        .WithMany("HomeMatches")
                        .HasForeignKey("TeamHomeId");

                    b.Navigation("Competition");

                    b.Navigation("TeamAway");

                    b.Navigation("TeamHome");
                });

            modelBuilder.Entity("CozySoccerChamp.Domain.Entities.Soccer.MatchResult", b =>
                {
                    b.HasOne("CozySoccerChamp.Domain.Entities.Soccer.Match", "Match")
                        .WithOne("MatchResult")
                        .HasForeignKey("CozySoccerChamp.Domain.Entities.Soccer.MatchResult", "MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");
                });

            modelBuilder.Entity("CozySoccerChamp.Domain.Entities.Soccer.Prediction", b =>
                {
                    b.HasOne("CozySoccerChamp.Domain.Entities.Soccer.Match", "Match")
                        .WithMany("Predictions")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CozySoccerChamp.Domain.Entities.ApplicationUser", "User")
                        .WithMany("Predictions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CozySoccerChamp.Domain.Entities.ApplicationUser", b =>
                {
                    b.Navigation("Predictions");
                });

            modelBuilder.Entity("CozySoccerChamp.Domain.Entities.Soccer.Competition", b =>
                {
                    b.Navigation("Matches");
                });

            modelBuilder.Entity("CozySoccerChamp.Domain.Entities.Soccer.Match", b =>
                {
                    b.Navigation("MatchResult");

                    b.Navigation("Predictions");
                });

            modelBuilder.Entity("CozySoccerChamp.Domain.Entities.Soccer.Team", b =>
                {
                    b.Navigation("AwayMatches");

                    b.Navigation("HomeMatches");
                });
#pragma warning restore 612, 618
        }
    }
}
